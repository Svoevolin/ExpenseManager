// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	orderedmap "github.com/wk8/go-ordered-map"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageSender) DeleteMessage(userID int64, messageID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageSenderMockRecorder) DeleteMessage(userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageSender)(nil).DeleteMessage), userID, messageID)
}

// EditTextAndMarkup mocks base method.
func (m *MockMessageSender) EditTextAndMarkup(text string, userID int64, messageID int, buttons *orderedmap.OrderedMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTextAndMarkup", text, userID, messageID, buttons)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditTextAndMarkup indicates an expected call of EditTextAndMarkup.
func (mr *MockMessageSenderMockRecorder) EditTextAndMarkup(text, userID, messageID, buttons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTextAndMarkup", reflect.TypeOf((*MockMessageSender)(nil).EditTextAndMarkup), text, userID, messageID, buttons)
}

// SendInlineMenu mocks base method.
func (m *MockMessageSender) SendInlineMenu(text string, userID int64, buttons *orderedmap.OrderedMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInlineMenu", text, userID, buttons)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInlineMenu indicates an expected call of SendInlineMenu.
func (mr *MockMessageSenderMockRecorder) SendInlineMenu(text, userID, buttons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInlineMenu", reflect.TypeOf((*MockMessageSender)(nil).SendInlineMenu), text, userID, buttons)
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}
