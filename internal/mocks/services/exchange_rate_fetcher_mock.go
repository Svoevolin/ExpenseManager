// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package services

//go:generate minimock -i github.com/Svoevolin/workshop_1_bot/internal/services.ExchangeRateFetcher -o exchange_rate_fetcher_mock.go -n ExchangeRateFetcherMock -p services

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/Svoevolin/workshop_1_bot/internal/domain"
	"github.com/gojuno/minimock/v3"
)

// ExchangeRateFetcherMock implements services.ExchangeRateFetcher
type ExchangeRateFetcherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcFetchRates          func(ctx context.Context, date time.Time) (ra1 []domain.Rate, err error)
	inspectFuncFetchRates   func(ctx context.Context, date time.Time)
	afterFetchRatesCounter  uint64
	beforeFetchRatesCounter uint64
	FetchRatesMock          mExchangeRateFetcherMockFetchRates
}

// NewExchangeRateFetcherMock returns a mock for services.ExchangeRateFetcher
func NewExchangeRateFetcherMock(t minimock.Tester) *ExchangeRateFetcherMock {
	m := &ExchangeRateFetcherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FetchRatesMock = mExchangeRateFetcherMockFetchRates{mock: m}
	m.FetchRatesMock.callArgs = []*ExchangeRateFetcherMockFetchRatesParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mExchangeRateFetcherMockFetchRates struct {
	mock               *ExchangeRateFetcherMock
	defaultExpectation *ExchangeRateFetcherMockFetchRatesExpectation
	expectations       []*ExchangeRateFetcherMockFetchRatesExpectation

	callArgs []*ExchangeRateFetcherMockFetchRatesParams
	mutex    sync.RWMutex
}

// ExchangeRateFetcherMockFetchRatesExpectation specifies expectation struct of the ExchangeRateFetcher.FetchRates
type ExchangeRateFetcherMockFetchRatesExpectation struct {
	mock    *ExchangeRateFetcherMock
	params  *ExchangeRateFetcherMockFetchRatesParams
	results *ExchangeRateFetcherMockFetchRatesResults
	Counter uint64
}

// ExchangeRateFetcherMockFetchRatesParams contains parameters of the ExchangeRateFetcher.FetchRates
type ExchangeRateFetcherMockFetchRatesParams struct {
	ctx  context.Context
	date time.Time
}

// ExchangeRateFetcherMockFetchRatesResults contains results of the ExchangeRateFetcher.FetchRates
type ExchangeRateFetcherMockFetchRatesResults struct {
	ra1 []domain.Rate
	err error
}

// Expect sets up expected params for ExchangeRateFetcher.FetchRates
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) Expect(ctx context.Context, date time.Time) *mExchangeRateFetcherMockFetchRates {
	if mmFetchRates.mock.funcFetchRates != nil {
		mmFetchRates.mock.t.Fatalf("ExchangeRateFetcherMock.FetchRates mock is already set by Set")
	}

	if mmFetchRates.defaultExpectation == nil {
		mmFetchRates.defaultExpectation = &ExchangeRateFetcherMockFetchRatesExpectation{}
	}

	mmFetchRates.defaultExpectation.params = &ExchangeRateFetcherMockFetchRatesParams{ctx, date}
	for _, e := range mmFetchRates.expectations {
		if minimock.Equal(e.params, mmFetchRates.defaultExpectation.params) {
			mmFetchRates.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFetchRates.defaultExpectation.params)
		}
	}

	return mmFetchRates
}

// Inspect accepts an inspector function that has same arguments as the ExchangeRateFetcher.FetchRates
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) Inspect(f func(ctx context.Context, date time.Time)) *mExchangeRateFetcherMockFetchRates {
	if mmFetchRates.mock.inspectFuncFetchRates != nil {
		mmFetchRates.mock.t.Fatalf("Inspect function is already set for ExchangeRateFetcherMock.FetchRates")
	}

	mmFetchRates.mock.inspectFuncFetchRates = f

	return mmFetchRates
}

// Return sets up results that will be returned by ExchangeRateFetcher.FetchRates
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) Return(ra1 []domain.Rate, err error) *ExchangeRateFetcherMock {
	if mmFetchRates.mock.funcFetchRates != nil {
		mmFetchRates.mock.t.Fatalf("ExchangeRateFetcherMock.FetchRates mock is already set by Set")
	}

	if mmFetchRates.defaultExpectation == nil {
		mmFetchRates.defaultExpectation = &ExchangeRateFetcherMockFetchRatesExpectation{mock: mmFetchRates.mock}
	}
	mmFetchRates.defaultExpectation.results = &ExchangeRateFetcherMockFetchRatesResults{ra1, err}
	return mmFetchRates.mock
}

// Set uses given function f to mock the ExchangeRateFetcher.FetchRates method
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) Set(f func(ctx context.Context, date time.Time) (ra1 []domain.Rate, err error)) *ExchangeRateFetcherMock {
	if mmFetchRates.defaultExpectation != nil {
		mmFetchRates.mock.t.Fatalf("Default expectation is already set for the ExchangeRateFetcher.FetchRates method")
	}

	if len(mmFetchRates.expectations) > 0 {
		mmFetchRates.mock.t.Fatalf("Some expectations are already set for the ExchangeRateFetcher.FetchRates method")
	}

	mmFetchRates.mock.funcFetchRates = f
	return mmFetchRates.mock
}

// When sets expectation for the ExchangeRateFetcher.FetchRates which will trigger the result defined by the following
// Then helper
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) When(ctx context.Context, date time.Time) *ExchangeRateFetcherMockFetchRatesExpectation {
	if mmFetchRates.mock.funcFetchRates != nil {
		mmFetchRates.mock.t.Fatalf("ExchangeRateFetcherMock.FetchRates mock is already set by Set")
	}

	expectation := &ExchangeRateFetcherMockFetchRatesExpectation{
		mock:   mmFetchRates.mock,
		params: &ExchangeRateFetcherMockFetchRatesParams{ctx, date},
	}
	mmFetchRates.expectations = append(mmFetchRates.expectations, expectation)
	return expectation
}

// Then sets up ExchangeRateFetcher.FetchRates return parameters for the expectation previously defined by the When method
func (e *ExchangeRateFetcherMockFetchRatesExpectation) Then(ra1 []domain.Rate, err error) *ExchangeRateFetcherMock {
	e.results = &ExchangeRateFetcherMockFetchRatesResults{ra1, err}
	return e.mock
}

// FetchRates implements services.ExchangeRateFetcher
func (mmFetchRates *ExchangeRateFetcherMock) FetchRates(ctx context.Context, date time.Time) (ra1 []domain.Rate, err error) {
	mm_atomic.AddUint64(&mmFetchRates.beforeFetchRatesCounter, 1)
	defer mm_atomic.AddUint64(&mmFetchRates.afterFetchRatesCounter, 1)

	if mmFetchRates.inspectFuncFetchRates != nil {
		mmFetchRates.inspectFuncFetchRates(ctx, date)
	}

	mm_params := ExchangeRateFetcherMockFetchRatesParams{ctx, date}

	// Record call args
	mmFetchRates.FetchRatesMock.mutex.Lock()
	mmFetchRates.FetchRatesMock.callArgs = append(mmFetchRates.FetchRatesMock.callArgs, &mm_params)
	mmFetchRates.FetchRatesMock.mutex.Unlock()

	for _, e := range mmFetchRates.FetchRatesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1, e.results.err
		}
	}

	if mmFetchRates.FetchRatesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFetchRates.FetchRatesMock.defaultExpectation.Counter, 1)
		mm_want := mmFetchRates.FetchRatesMock.defaultExpectation.params
		mm_got := ExchangeRateFetcherMockFetchRatesParams{ctx, date}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFetchRates.t.Errorf("ExchangeRateFetcherMock.FetchRates got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFetchRates.FetchRatesMock.defaultExpectation.results
		if mm_results == nil {
			mmFetchRates.t.Fatal("No results are set for the ExchangeRateFetcherMock.FetchRates")
		}
		return (*mm_results).ra1, (*mm_results).err
	}
	if mmFetchRates.funcFetchRates != nil {
		return mmFetchRates.funcFetchRates(ctx, date)
	}
	mmFetchRates.t.Fatalf("Unexpected call to ExchangeRateFetcherMock.FetchRates. %v %v", ctx, date)
	return
}

// FetchRatesAfterCounter returns a count of finished ExchangeRateFetcherMock.FetchRates invocations
func (mmFetchRates *ExchangeRateFetcherMock) FetchRatesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetchRates.afterFetchRatesCounter)
}

// FetchRatesBeforeCounter returns a count of ExchangeRateFetcherMock.FetchRates invocations
func (mmFetchRates *ExchangeRateFetcherMock) FetchRatesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetchRates.beforeFetchRatesCounter)
}

// Calls returns a list of arguments used in each call to ExchangeRateFetcherMock.FetchRates.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFetchRates *mExchangeRateFetcherMockFetchRates) Calls() []*ExchangeRateFetcherMockFetchRatesParams {
	mmFetchRates.mutex.RLock()

	argCopy := make([]*ExchangeRateFetcherMockFetchRatesParams, len(mmFetchRates.callArgs))
	copy(argCopy, mmFetchRates.callArgs)

	mmFetchRates.mutex.RUnlock()

	return argCopy
}

// MinimockFetchRatesDone returns true if the count of the FetchRates invocations corresponds
// the number of defined expectations
func (m *ExchangeRateFetcherMock) MinimockFetchRatesDone() bool {
	for _, e := range m.FetchRatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchRatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchRatesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetchRates != nil && mm_atomic.LoadUint64(&m.afterFetchRatesCounter) < 1 {
		return false
	}
	return true
}

// MinimockFetchRatesInspect logs each unmet expectation
func (m *ExchangeRateFetcherMock) MinimockFetchRatesInspect() {
	for _, e := range m.FetchRatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ExchangeRateFetcherMock.FetchRates with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchRatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchRatesCounter) < 1 {
		if m.FetchRatesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ExchangeRateFetcherMock.FetchRates")
		} else {
			m.t.Errorf("Expected call to ExchangeRateFetcherMock.FetchRates with params: %#v", *m.FetchRatesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetchRates != nil && mm_atomic.LoadUint64(&m.afterFetchRatesCounter) < 1 {
		m.t.Error("Expected call to ExchangeRateFetcherMock.FetchRates")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ExchangeRateFetcherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockFetchRatesInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ExchangeRateFetcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ExchangeRateFetcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFetchRatesDone()
}
