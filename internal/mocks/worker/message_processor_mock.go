// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package worker

//go:generate minimock -i github.com/Svoevolin/workshop_1_bot/internal/worker.MessageProcessor -o message_processor_mock.go -n MessageProcessorMock -p worker

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Svoevolin/workshop_1_bot/internal/model/messages"
	"github.com/gojuno/minimock/v3"
)

// MessageProcessorMock implements worker.MessageProcessor
type MessageProcessorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcIncomingMessage          func(ctx context.Context, msg messages.Message) (err error)
	inspectFuncIncomingMessage   func(ctx context.Context, msg messages.Message)
	afterIncomingMessageCounter  uint64
	beforeIncomingMessageCounter uint64
	IncomingMessageMock          mMessageProcessorMockIncomingMessage
}

// NewMessageProcessorMock returns a mock for worker.MessageProcessor
func NewMessageProcessorMock(t minimock.Tester) *MessageProcessorMock {
	m := &MessageProcessorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.IncomingMessageMock = mMessageProcessorMockIncomingMessage{mock: m}
	m.IncomingMessageMock.callArgs = []*MessageProcessorMockIncomingMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMessageProcessorMockIncomingMessage struct {
	mock               *MessageProcessorMock
	defaultExpectation *MessageProcessorMockIncomingMessageExpectation
	expectations       []*MessageProcessorMockIncomingMessageExpectation

	callArgs []*MessageProcessorMockIncomingMessageParams
	mutex    sync.RWMutex
}

// MessageProcessorMockIncomingMessageExpectation specifies expectation struct of the MessageProcessor.IncomingMessage
type MessageProcessorMockIncomingMessageExpectation struct {
	mock    *MessageProcessorMock
	params  *MessageProcessorMockIncomingMessageParams
	results *MessageProcessorMockIncomingMessageResults
	Counter uint64
}

// MessageProcessorMockIncomingMessageParams contains parameters of the MessageProcessor.IncomingMessage
type MessageProcessorMockIncomingMessageParams struct {
	ctx context.Context
	msg messages.Message
}

// MessageProcessorMockIncomingMessageResults contains results of the MessageProcessor.IncomingMessage
type MessageProcessorMockIncomingMessageResults struct {
	err error
}

// Expect sets up expected params for MessageProcessor.IncomingMessage
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) Expect(ctx context.Context, msg messages.Message) *mMessageProcessorMockIncomingMessage {
	if mmIncomingMessage.mock.funcIncomingMessage != nil {
		mmIncomingMessage.mock.t.Fatalf("MessageProcessorMock.IncomingMessage mock is already set by Set")
	}

	if mmIncomingMessage.defaultExpectation == nil {
		mmIncomingMessage.defaultExpectation = &MessageProcessorMockIncomingMessageExpectation{}
	}

	mmIncomingMessage.defaultExpectation.params = &MessageProcessorMockIncomingMessageParams{ctx, msg}
	for _, e := range mmIncomingMessage.expectations {
		if minimock.Equal(e.params, mmIncomingMessage.defaultExpectation.params) {
			mmIncomingMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIncomingMessage.defaultExpectation.params)
		}
	}

	return mmIncomingMessage
}

// Inspect accepts an inspector function that has same arguments as the MessageProcessor.IncomingMessage
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) Inspect(f func(ctx context.Context, msg messages.Message)) *mMessageProcessorMockIncomingMessage {
	if mmIncomingMessage.mock.inspectFuncIncomingMessage != nil {
		mmIncomingMessage.mock.t.Fatalf("Inspect function is already set for MessageProcessorMock.IncomingMessage")
	}

	mmIncomingMessage.mock.inspectFuncIncomingMessage = f

	return mmIncomingMessage
}

// Return sets up results that will be returned by MessageProcessor.IncomingMessage
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) Return(err error) *MessageProcessorMock {
	if mmIncomingMessage.mock.funcIncomingMessage != nil {
		mmIncomingMessage.mock.t.Fatalf("MessageProcessorMock.IncomingMessage mock is already set by Set")
	}

	if mmIncomingMessage.defaultExpectation == nil {
		mmIncomingMessage.defaultExpectation = &MessageProcessorMockIncomingMessageExpectation{mock: mmIncomingMessage.mock}
	}
	mmIncomingMessage.defaultExpectation.results = &MessageProcessorMockIncomingMessageResults{err}
	return mmIncomingMessage.mock
}

// Set uses given function f to mock the MessageProcessor.IncomingMessage method
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) Set(f func(ctx context.Context, msg messages.Message) (err error)) *MessageProcessorMock {
	if mmIncomingMessage.defaultExpectation != nil {
		mmIncomingMessage.mock.t.Fatalf("Default expectation is already set for the MessageProcessor.IncomingMessage method")
	}

	if len(mmIncomingMessage.expectations) > 0 {
		mmIncomingMessage.mock.t.Fatalf("Some expectations are already set for the MessageProcessor.IncomingMessage method")
	}

	mmIncomingMessage.mock.funcIncomingMessage = f
	return mmIncomingMessage.mock
}

// When sets expectation for the MessageProcessor.IncomingMessage which will trigger the result defined by the following
// Then helper
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) When(ctx context.Context, msg messages.Message) *MessageProcessorMockIncomingMessageExpectation {
	if mmIncomingMessage.mock.funcIncomingMessage != nil {
		mmIncomingMessage.mock.t.Fatalf("MessageProcessorMock.IncomingMessage mock is already set by Set")
	}

	expectation := &MessageProcessorMockIncomingMessageExpectation{
		mock:   mmIncomingMessage.mock,
		params: &MessageProcessorMockIncomingMessageParams{ctx, msg},
	}
	mmIncomingMessage.expectations = append(mmIncomingMessage.expectations, expectation)
	return expectation
}

// Then sets up MessageProcessor.IncomingMessage return parameters for the expectation previously defined by the When method
func (e *MessageProcessorMockIncomingMessageExpectation) Then(err error) *MessageProcessorMock {
	e.results = &MessageProcessorMockIncomingMessageResults{err}
	return e.mock
}

// IncomingMessage implements worker.MessageProcessor
func (mmIncomingMessage *MessageProcessorMock) IncomingMessage(ctx context.Context, msg messages.Message) (err error) {
	mm_atomic.AddUint64(&mmIncomingMessage.beforeIncomingMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmIncomingMessage.afterIncomingMessageCounter, 1)

	if mmIncomingMessage.inspectFuncIncomingMessage != nil {
		mmIncomingMessage.inspectFuncIncomingMessage(ctx, msg)
	}

	mm_params := MessageProcessorMockIncomingMessageParams{ctx, msg}

	// Record call args
	mmIncomingMessage.IncomingMessageMock.mutex.Lock()
	mmIncomingMessage.IncomingMessageMock.callArgs = append(mmIncomingMessage.IncomingMessageMock.callArgs, &mm_params)
	mmIncomingMessage.IncomingMessageMock.mutex.Unlock()

	for _, e := range mmIncomingMessage.IncomingMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmIncomingMessage.IncomingMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIncomingMessage.IncomingMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmIncomingMessage.IncomingMessageMock.defaultExpectation.params
		mm_got := MessageProcessorMockIncomingMessageParams{ctx, msg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmIncomingMessage.t.Errorf("MessageProcessorMock.IncomingMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmIncomingMessage.IncomingMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmIncomingMessage.t.Fatal("No results are set for the MessageProcessorMock.IncomingMessage")
		}
		return (*mm_results).err
	}
	if mmIncomingMessage.funcIncomingMessage != nil {
		return mmIncomingMessage.funcIncomingMessage(ctx, msg)
	}
	mmIncomingMessage.t.Fatalf("Unexpected call to MessageProcessorMock.IncomingMessage. %v %v", ctx, msg)
	return
}

// IncomingMessageAfterCounter returns a count of finished MessageProcessorMock.IncomingMessage invocations
func (mmIncomingMessage *MessageProcessorMock) IncomingMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncomingMessage.afterIncomingMessageCounter)
}

// IncomingMessageBeforeCounter returns a count of MessageProcessorMock.IncomingMessage invocations
func (mmIncomingMessage *MessageProcessorMock) IncomingMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncomingMessage.beforeIncomingMessageCounter)
}

// Calls returns a list of arguments used in each call to MessageProcessorMock.IncomingMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIncomingMessage *mMessageProcessorMockIncomingMessage) Calls() []*MessageProcessorMockIncomingMessageParams {
	mmIncomingMessage.mutex.RLock()

	argCopy := make([]*MessageProcessorMockIncomingMessageParams, len(mmIncomingMessage.callArgs))
	copy(argCopy, mmIncomingMessage.callArgs)

	mmIncomingMessage.mutex.RUnlock()

	return argCopy
}

// MinimockIncomingMessageDone returns true if the count of the IncomingMessage invocations corresponds
// the number of defined expectations
func (m *MessageProcessorMock) MinimockIncomingMessageDone() bool {
	for _, e := range m.IncomingMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncomingMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncomingMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncomingMessage != nil && mm_atomic.LoadUint64(&m.afterIncomingMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockIncomingMessageInspect logs each unmet expectation
func (m *MessageProcessorMock) MinimockIncomingMessageInspect() {
	for _, e := range m.IncomingMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageProcessorMock.IncomingMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncomingMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncomingMessageCounter) < 1 {
		if m.IncomingMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageProcessorMock.IncomingMessage")
		} else {
			m.t.Errorf("Expected call to MessageProcessorMock.IncomingMessage with params: %#v", *m.IncomingMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncomingMessage != nil && mm_atomic.LoadUint64(&m.afterIncomingMessageCounter) < 1 {
		m.t.Error("Expected call to MessageProcessorMock.IncomingMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessageProcessorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockIncomingMessageInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessageProcessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessageProcessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockIncomingMessageDone()
}
