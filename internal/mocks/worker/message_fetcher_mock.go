// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package worker

//go:generate minimock -i github.com/Svoevolin/workshop_1_bot/internal/worker.MessageFetcher -o message_fetcher_mock.go -n MessageFetcherMock -p worker

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/gojuno/minimock/v3"
)

// MessageFetcherMock implements worker.MessageFetcher
type MessageFetcherMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStart          func() (u1 tgbotapi.UpdatesChannel)
	inspectFuncStart   func()
	afterStartCounter  uint64
	beforeStartCounter uint64
	StartMock          mMessageFetcherMockStart

	funcStop          func()
	inspectFuncStop   func()
	afterStopCounter  uint64
	beforeStopCounter uint64
	StopMock          mMessageFetcherMockStop
}

// NewMessageFetcherMock returns a mock for worker.MessageFetcher
func NewMessageFetcherMock(t minimock.Tester) *MessageFetcherMock {
	m := &MessageFetcherMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StartMock = mMessageFetcherMockStart{mock: m}

	m.StopMock = mMessageFetcherMockStop{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMessageFetcherMockStart struct {
	mock               *MessageFetcherMock
	defaultExpectation *MessageFetcherMockStartExpectation
	expectations       []*MessageFetcherMockStartExpectation
}

// MessageFetcherMockStartExpectation specifies expectation struct of the MessageFetcher.Start
type MessageFetcherMockStartExpectation struct {
	mock *MessageFetcherMock

	results *MessageFetcherMockStartResults
	Counter uint64
}

// MessageFetcherMockStartResults contains results of the MessageFetcher.Start
type MessageFetcherMockStartResults struct {
	u1 tgbotapi.UpdatesChannel
}

// Expect sets up expected params for MessageFetcher.Start
func (mmStart *mMessageFetcherMockStart) Expect() *mMessageFetcherMockStart {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("MessageFetcherMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &MessageFetcherMockStartExpectation{}
	}

	return mmStart
}

// Inspect accepts an inspector function that has same arguments as the MessageFetcher.Start
func (mmStart *mMessageFetcherMockStart) Inspect(f func()) *mMessageFetcherMockStart {
	if mmStart.mock.inspectFuncStart != nil {
		mmStart.mock.t.Fatalf("Inspect function is already set for MessageFetcherMock.Start")
	}

	mmStart.mock.inspectFuncStart = f

	return mmStart
}

// Return sets up results that will be returned by MessageFetcher.Start
func (mmStart *mMessageFetcherMockStart) Return(u1 tgbotapi.UpdatesChannel) *MessageFetcherMock {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("MessageFetcherMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &MessageFetcherMockStartExpectation{mock: mmStart.mock}
	}
	mmStart.defaultExpectation.results = &MessageFetcherMockStartResults{u1}
	return mmStart.mock
}

// Set uses given function f to mock the MessageFetcher.Start method
func (mmStart *mMessageFetcherMockStart) Set(f func() (u1 tgbotapi.UpdatesChannel)) *MessageFetcherMock {
	if mmStart.defaultExpectation != nil {
		mmStart.mock.t.Fatalf("Default expectation is already set for the MessageFetcher.Start method")
	}

	if len(mmStart.expectations) > 0 {
		mmStart.mock.t.Fatalf("Some expectations are already set for the MessageFetcher.Start method")
	}

	mmStart.mock.funcStart = f
	return mmStart.mock
}

// Start implements worker.MessageFetcher
func (mmStart *MessageFetcherMock) Start() (u1 tgbotapi.UpdatesChannel) {
	mm_atomic.AddUint64(&mmStart.beforeStartCounter, 1)
	defer mm_atomic.AddUint64(&mmStart.afterStartCounter, 1)

	if mmStart.inspectFuncStart != nil {
		mmStart.inspectFuncStart()
	}

	if mmStart.StartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStart.StartMock.defaultExpectation.Counter, 1)

		mm_results := mmStart.StartMock.defaultExpectation.results
		if mm_results == nil {
			mmStart.t.Fatal("No results are set for the MessageFetcherMock.Start")
		}
		return (*mm_results).u1
	}
	if mmStart.funcStart != nil {
		return mmStart.funcStart()
	}
	mmStart.t.Fatalf("Unexpected call to MessageFetcherMock.Start.")
	return
}

// StartAfterCounter returns a count of finished MessageFetcherMock.Start invocations
func (mmStart *MessageFetcherMock) StartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.afterStartCounter)
}

// StartBeforeCounter returns a count of MessageFetcherMock.Start invocations
func (mmStart *MessageFetcherMock) StartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.beforeStartCounter)
}

// MinimockStartDone returns true if the count of the Start invocations corresponds
// the number of defined expectations
func (m *MessageFetcherMock) MinimockStartDone() bool {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockStartInspect logs each unmet expectation
func (m *MessageFetcherMock) MinimockStartInspect() {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MessageFetcherMock.Start")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to MessageFetcherMock.Start")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to MessageFetcherMock.Start")
	}
}

type mMessageFetcherMockStop struct {
	mock               *MessageFetcherMock
	defaultExpectation *MessageFetcherMockStopExpectation
	expectations       []*MessageFetcherMockStopExpectation
}

// MessageFetcherMockStopExpectation specifies expectation struct of the MessageFetcher.Stop
type MessageFetcherMockStopExpectation struct {
	mock *MessageFetcherMock

	Counter uint64
}

// Expect sets up expected params for MessageFetcher.Stop
func (mmStop *mMessageFetcherMockStop) Expect() *mMessageFetcherMockStop {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("MessageFetcherMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &MessageFetcherMockStopExpectation{}
	}

	return mmStop
}

// Inspect accepts an inspector function that has same arguments as the MessageFetcher.Stop
func (mmStop *mMessageFetcherMockStop) Inspect(f func()) *mMessageFetcherMockStop {
	if mmStop.mock.inspectFuncStop != nil {
		mmStop.mock.t.Fatalf("Inspect function is already set for MessageFetcherMock.Stop")
	}

	mmStop.mock.inspectFuncStop = f

	return mmStop
}

// Return sets up results that will be returned by MessageFetcher.Stop
func (mmStop *mMessageFetcherMockStop) Return() *MessageFetcherMock {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("MessageFetcherMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &MessageFetcherMockStopExpectation{mock: mmStop.mock}
	}

	return mmStop.mock
}

// Set uses given function f to mock the MessageFetcher.Stop method
func (mmStop *mMessageFetcherMockStop) Set(f func()) *MessageFetcherMock {
	if mmStop.defaultExpectation != nil {
		mmStop.mock.t.Fatalf("Default expectation is already set for the MessageFetcher.Stop method")
	}

	if len(mmStop.expectations) > 0 {
		mmStop.mock.t.Fatalf("Some expectations are already set for the MessageFetcher.Stop method")
	}

	mmStop.mock.funcStop = f
	return mmStop.mock
}

// Stop implements worker.MessageFetcher
func (mmStop *MessageFetcherMock) Stop() {
	mm_atomic.AddUint64(&mmStop.beforeStopCounter, 1)
	defer mm_atomic.AddUint64(&mmStop.afterStopCounter, 1)

	if mmStop.inspectFuncStop != nil {
		mmStop.inspectFuncStop()
	}

	if mmStop.StopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStop.StopMock.defaultExpectation.Counter, 1)

		return

	}
	if mmStop.funcStop != nil {
		mmStop.funcStop()
		return
	}
	mmStop.t.Fatalf("Unexpected call to MessageFetcherMock.Stop.")

}

// StopAfterCounter returns a count of finished MessageFetcherMock.Stop invocations
func (mmStop *MessageFetcherMock) StopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.afterStopCounter)
}

// StopBeforeCounter returns a count of MessageFetcherMock.Stop invocations
func (mmStop *MessageFetcherMock) StopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.beforeStopCounter)
}

// MinimockStopDone returns true if the count of the Stop invocations corresponds
// the number of defined expectations
func (m *MessageFetcherMock) MinimockStopDone() bool {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockStopInspect logs each unmet expectation
func (m *MessageFetcherMock) MinimockStopInspect() {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MessageFetcherMock.Stop")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to MessageFetcherMock.Stop")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to MessageFetcherMock.Stop")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessageFetcherMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStartInspect()

			m.MinimockStopInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessageFetcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessageFetcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStartDone() &&
		m.MinimockStopDone()
}
