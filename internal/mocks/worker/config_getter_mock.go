// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package worker

//go:generate minimock -i github.com/Svoevolin/workshop_1_bot/internal/worker.ConfigGetter -o config_getter_mock.go -n ConfigGetterMock -p worker

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ConfigGetterMock implements worker.ConfigGetter
type ConfigGetterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcFrequencyExchangeRateUpdates          func() (d1 time.Duration)
	inspectFuncFrequencyExchangeRateUpdates   func()
	afterFrequencyExchangeRateUpdatesCounter  uint64
	beforeFrequencyExchangeRateUpdatesCounter uint64
	FrequencyExchangeRateUpdatesMock          mConfigGetterMockFrequencyExchangeRateUpdates
}

// NewConfigGetterMock returns a mock for worker.ConfigGetter
func NewConfigGetterMock(t minimock.Tester) *ConfigGetterMock {
	m := &ConfigGetterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FrequencyExchangeRateUpdatesMock = mConfigGetterMockFrequencyExchangeRateUpdates{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mConfigGetterMockFrequencyExchangeRateUpdates struct {
	mock               *ConfigGetterMock
	defaultExpectation *ConfigGetterMockFrequencyExchangeRateUpdatesExpectation
	expectations       []*ConfigGetterMockFrequencyExchangeRateUpdatesExpectation
}

// ConfigGetterMockFrequencyExchangeRateUpdatesExpectation specifies expectation struct of the ConfigGetter.FrequencyExchangeRateUpdates
type ConfigGetterMockFrequencyExchangeRateUpdatesExpectation struct {
	mock *ConfigGetterMock

	results *ConfigGetterMockFrequencyExchangeRateUpdatesResults
	Counter uint64
}

// ConfigGetterMockFrequencyExchangeRateUpdatesResults contains results of the ConfigGetter.FrequencyExchangeRateUpdates
type ConfigGetterMockFrequencyExchangeRateUpdatesResults struct {
	d1 time.Duration
}

// Expect sets up expected params for ConfigGetter.FrequencyExchangeRateUpdates
func (mmFrequencyExchangeRateUpdates *mConfigGetterMockFrequencyExchangeRateUpdates) Expect() *mConfigGetterMockFrequencyExchangeRateUpdates {
	if mmFrequencyExchangeRateUpdates.mock.funcFrequencyExchangeRateUpdates != nil {
		mmFrequencyExchangeRateUpdates.mock.t.Fatalf("ConfigGetterMock.FrequencyExchangeRateUpdates mock is already set by Set")
	}

	if mmFrequencyExchangeRateUpdates.defaultExpectation == nil {
		mmFrequencyExchangeRateUpdates.defaultExpectation = &ConfigGetterMockFrequencyExchangeRateUpdatesExpectation{}
	}

	return mmFrequencyExchangeRateUpdates
}

// Inspect accepts an inspector function that has same arguments as the ConfigGetter.FrequencyExchangeRateUpdates
func (mmFrequencyExchangeRateUpdates *mConfigGetterMockFrequencyExchangeRateUpdates) Inspect(f func()) *mConfigGetterMockFrequencyExchangeRateUpdates {
	if mmFrequencyExchangeRateUpdates.mock.inspectFuncFrequencyExchangeRateUpdates != nil {
		mmFrequencyExchangeRateUpdates.mock.t.Fatalf("Inspect function is already set for ConfigGetterMock.FrequencyExchangeRateUpdates")
	}

	mmFrequencyExchangeRateUpdates.mock.inspectFuncFrequencyExchangeRateUpdates = f

	return mmFrequencyExchangeRateUpdates
}

// Return sets up results that will be returned by ConfigGetter.FrequencyExchangeRateUpdates
func (mmFrequencyExchangeRateUpdates *mConfigGetterMockFrequencyExchangeRateUpdates) Return(d1 time.Duration) *ConfigGetterMock {
	if mmFrequencyExchangeRateUpdates.mock.funcFrequencyExchangeRateUpdates != nil {
		mmFrequencyExchangeRateUpdates.mock.t.Fatalf("ConfigGetterMock.FrequencyExchangeRateUpdates mock is already set by Set")
	}

	if mmFrequencyExchangeRateUpdates.defaultExpectation == nil {
		mmFrequencyExchangeRateUpdates.defaultExpectation = &ConfigGetterMockFrequencyExchangeRateUpdatesExpectation{mock: mmFrequencyExchangeRateUpdates.mock}
	}
	mmFrequencyExchangeRateUpdates.defaultExpectation.results = &ConfigGetterMockFrequencyExchangeRateUpdatesResults{d1}
	return mmFrequencyExchangeRateUpdates.mock
}

// Set uses given function f to mock the ConfigGetter.FrequencyExchangeRateUpdates method
func (mmFrequencyExchangeRateUpdates *mConfigGetterMockFrequencyExchangeRateUpdates) Set(f func() (d1 time.Duration)) *ConfigGetterMock {
	if mmFrequencyExchangeRateUpdates.defaultExpectation != nil {
		mmFrequencyExchangeRateUpdates.mock.t.Fatalf("Default expectation is already set for the ConfigGetter.FrequencyExchangeRateUpdates method")
	}

	if len(mmFrequencyExchangeRateUpdates.expectations) > 0 {
		mmFrequencyExchangeRateUpdates.mock.t.Fatalf("Some expectations are already set for the ConfigGetter.FrequencyExchangeRateUpdates method")
	}

	mmFrequencyExchangeRateUpdates.mock.funcFrequencyExchangeRateUpdates = f
	return mmFrequencyExchangeRateUpdates.mock
}

// FrequencyExchangeRateUpdates implements worker.ConfigGetter
func (mmFrequencyExchangeRateUpdates *ConfigGetterMock) FrequencyExchangeRateUpdates() (d1 time.Duration) {
	mm_atomic.AddUint64(&mmFrequencyExchangeRateUpdates.beforeFrequencyExchangeRateUpdatesCounter, 1)
	defer mm_atomic.AddUint64(&mmFrequencyExchangeRateUpdates.afterFrequencyExchangeRateUpdatesCounter, 1)

	if mmFrequencyExchangeRateUpdates.inspectFuncFrequencyExchangeRateUpdates != nil {
		mmFrequencyExchangeRateUpdates.inspectFuncFrequencyExchangeRateUpdates()
	}

	if mmFrequencyExchangeRateUpdates.FrequencyExchangeRateUpdatesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFrequencyExchangeRateUpdates.FrequencyExchangeRateUpdatesMock.defaultExpectation.Counter, 1)

		mm_results := mmFrequencyExchangeRateUpdates.FrequencyExchangeRateUpdatesMock.defaultExpectation.results
		if mm_results == nil {
			mmFrequencyExchangeRateUpdates.t.Fatal("No results are set for the ConfigGetterMock.FrequencyExchangeRateUpdates")
		}
		return (*mm_results).d1
	}
	if mmFrequencyExchangeRateUpdates.funcFrequencyExchangeRateUpdates != nil {
		return mmFrequencyExchangeRateUpdates.funcFrequencyExchangeRateUpdates()
	}
	mmFrequencyExchangeRateUpdates.t.Fatalf("Unexpected call to ConfigGetterMock.FrequencyExchangeRateUpdates.")
	return
}

// FrequencyExchangeRateUpdatesAfterCounter returns a count of finished ConfigGetterMock.FrequencyExchangeRateUpdates invocations
func (mmFrequencyExchangeRateUpdates *ConfigGetterMock) FrequencyExchangeRateUpdatesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFrequencyExchangeRateUpdates.afterFrequencyExchangeRateUpdatesCounter)
}

// FrequencyExchangeRateUpdatesBeforeCounter returns a count of ConfigGetterMock.FrequencyExchangeRateUpdates invocations
func (mmFrequencyExchangeRateUpdates *ConfigGetterMock) FrequencyExchangeRateUpdatesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFrequencyExchangeRateUpdates.beforeFrequencyExchangeRateUpdatesCounter)
}

// MinimockFrequencyExchangeRateUpdatesDone returns true if the count of the FrequencyExchangeRateUpdates invocations corresponds
// the number of defined expectations
func (m *ConfigGetterMock) MinimockFrequencyExchangeRateUpdatesDone() bool {
	for _, e := range m.FrequencyExchangeRateUpdatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FrequencyExchangeRateUpdatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFrequencyExchangeRateUpdatesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFrequencyExchangeRateUpdates != nil && mm_atomic.LoadUint64(&m.afterFrequencyExchangeRateUpdatesCounter) < 1 {
		return false
	}
	return true
}

// MinimockFrequencyExchangeRateUpdatesInspect logs each unmet expectation
func (m *ConfigGetterMock) MinimockFrequencyExchangeRateUpdatesInspect() {
	for _, e := range m.FrequencyExchangeRateUpdatesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ConfigGetterMock.FrequencyExchangeRateUpdates")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FrequencyExchangeRateUpdatesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFrequencyExchangeRateUpdatesCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.FrequencyExchangeRateUpdates")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFrequencyExchangeRateUpdates != nil && mm_atomic.LoadUint64(&m.afterFrequencyExchangeRateUpdatesCounter) < 1 {
		m.t.Error("Expected call to ConfigGetterMock.FrequencyExchangeRateUpdates")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ConfigGetterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockFrequencyExchangeRateUpdatesInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ConfigGetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ConfigGetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFrequencyExchangeRateUpdatesDone()
}
