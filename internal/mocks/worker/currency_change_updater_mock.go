// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package worker

//go:generate minimock -i github.com/Svoevolin/workshop_1_bot/internal/worker.CurrencyChangeUpdater -o currency_change_updater_mock.go -n CurrencyChangeUpdaterMock -p worker

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CurrencyChangeUpdaterMock implements worker.CurrencyChangeUpdater
type CurrencyChangeUpdaterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcUpdateCurrency          func(ctx context.Context, time time.Time) (err error)
	inspectFuncUpdateCurrency   func(ctx context.Context, time time.Time)
	afterUpdateCurrencyCounter  uint64
	beforeUpdateCurrencyCounter uint64
	UpdateCurrencyMock          mCurrencyChangeUpdaterMockUpdateCurrency
}

// NewCurrencyChangeUpdaterMock returns a mock for worker.CurrencyChangeUpdater
func NewCurrencyChangeUpdaterMock(t minimock.Tester) *CurrencyChangeUpdaterMock {
	m := &CurrencyChangeUpdaterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UpdateCurrencyMock = mCurrencyChangeUpdaterMockUpdateCurrency{mock: m}
	m.UpdateCurrencyMock.callArgs = []*CurrencyChangeUpdaterMockUpdateCurrencyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCurrencyChangeUpdaterMockUpdateCurrency struct {
	mock               *CurrencyChangeUpdaterMock
	defaultExpectation *CurrencyChangeUpdaterMockUpdateCurrencyExpectation
	expectations       []*CurrencyChangeUpdaterMockUpdateCurrencyExpectation

	callArgs []*CurrencyChangeUpdaterMockUpdateCurrencyParams
	mutex    sync.RWMutex
}

// CurrencyChangeUpdaterMockUpdateCurrencyExpectation specifies expectation struct of the CurrencyChangeUpdater.UpdateCurrency
type CurrencyChangeUpdaterMockUpdateCurrencyExpectation struct {
	mock    *CurrencyChangeUpdaterMock
	params  *CurrencyChangeUpdaterMockUpdateCurrencyParams
	results *CurrencyChangeUpdaterMockUpdateCurrencyResults
	Counter uint64
}

// CurrencyChangeUpdaterMockUpdateCurrencyParams contains parameters of the CurrencyChangeUpdater.UpdateCurrency
type CurrencyChangeUpdaterMockUpdateCurrencyParams struct {
	ctx  context.Context
	time time.Time
}

// CurrencyChangeUpdaterMockUpdateCurrencyResults contains results of the CurrencyChangeUpdater.UpdateCurrency
type CurrencyChangeUpdaterMockUpdateCurrencyResults struct {
	err error
}

// Expect sets up expected params for CurrencyChangeUpdater.UpdateCurrency
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) Expect(ctx context.Context, time time.Time) *mCurrencyChangeUpdaterMockUpdateCurrency {
	if mmUpdateCurrency.mock.funcUpdateCurrency != nil {
		mmUpdateCurrency.mock.t.Fatalf("CurrencyChangeUpdaterMock.UpdateCurrency mock is already set by Set")
	}

	if mmUpdateCurrency.defaultExpectation == nil {
		mmUpdateCurrency.defaultExpectation = &CurrencyChangeUpdaterMockUpdateCurrencyExpectation{}
	}

	mmUpdateCurrency.defaultExpectation.params = &CurrencyChangeUpdaterMockUpdateCurrencyParams{ctx, time}
	for _, e := range mmUpdateCurrency.expectations {
		if minimock.Equal(e.params, mmUpdateCurrency.defaultExpectation.params) {
			mmUpdateCurrency.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateCurrency.defaultExpectation.params)
		}
	}

	return mmUpdateCurrency
}

// Inspect accepts an inspector function that has same arguments as the CurrencyChangeUpdater.UpdateCurrency
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) Inspect(f func(ctx context.Context, time time.Time)) *mCurrencyChangeUpdaterMockUpdateCurrency {
	if mmUpdateCurrency.mock.inspectFuncUpdateCurrency != nil {
		mmUpdateCurrency.mock.t.Fatalf("Inspect function is already set for CurrencyChangeUpdaterMock.UpdateCurrency")
	}

	mmUpdateCurrency.mock.inspectFuncUpdateCurrency = f

	return mmUpdateCurrency
}

// Return sets up results that will be returned by CurrencyChangeUpdater.UpdateCurrency
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) Return(err error) *CurrencyChangeUpdaterMock {
	if mmUpdateCurrency.mock.funcUpdateCurrency != nil {
		mmUpdateCurrency.mock.t.Fatalf("CurrencyChangeUpdaterMock.UpdateCurrency mock is already set by Set")
	}

	if mmUpdateCurrency.defaultExpectation == nil {
		mmUpdateCurrency.defaultExpectation = &CurrencyChangeUpdaterMockUpdateCurrencyExpectation{mock: mmUpdateCurrency.mock}
	}
	mmUpdateCurrency.defaultExpectation.results = &CurrencyChangeUpdaterMockUpdateCurrencyResults{err}
	return mmUpdateCurrency.mock
}

// Set uses given function f to mock the CurrencyChangeUpdater.UpdateCurrency method
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) Set(f func(ctx context.Context, time time.Time) (err error)) *CurrencyChangeUpdaterMock {
	if mmUpdateCurrency.defaultExpectation != nil {
		mmUpdateCurrency.mock.t.Fatalf("Default expectation is already set for the CurrencyChangeUpdater.UpdateCurrency method")
	}

	if len(mmUpdateCurrency.expectations) > 0 {
		mmUpdateCurrency.mock.t.Fatalf("Some expectations are already set for the CurrencyChangeUpdater.UpdateCurrency method")
	}

	mmUpdateCurrency.mock.funcUpdateCurrency = f
	return mmUpdateCurrency.mock
}

// When sets expectation for the CurrencyChangeUpdater.UpdateCurrency which will trigger the result defined by the following
// Then helper
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) When(ctx context.Context, time time.Time) *CurrencyChangeUpdaterMockUpdateCurrencyExpectation {
	if mmUpdateCurrency.mock.funcUpdateCurrency != nil {
		mmUpdateCurrency.mock.t.Fatalf("CurrencyChangeUpdaterMock.UpdateCurrency mock is already set by Set")
	}

	expectation := &CurrencyChangeUpdaterMockUpdateCurrencyExpectation{
		mock:   mmUpdateCurrency.mock,
		params: &CurrencyChangeUpdaterMockUpdateCurrencyParams{ctx, time},
	}
	mmUpdateCurrency.expectations = append(mmUpdateCurrency.expectations, expectation)
	return expectation
}

// Then sets up CurrencyChangeUpdater.UpdateCurrency return parameters for the expectation previously defined by the When method
func (e *CurrencyChangeUpdaterMockUpdateCurrencyExpectation) Then(err error) *CurrencyChangeUpdaterMock {
	e.results = &CurrencyChangeUpdaterMockUpdateCurrencyResults{err}
	return e.mock
}

// UpdateCurrency implements worker.CurrencyChangeUpdater
func (mmUpdateCurrency *CurrencyChangeUpdaterMock) UpdateCurrency(ctx context.Context, time time.Time) (err error) {
	mm_atomic.AddUint64(&mmUpdateCurrency.beforeUpdateCurrencyCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateCurrency.afterUpdateCurrencyCounter, 1)

	if mmUpdateCurrency.inspectFuncUpdateCurrency != nil {
		mmUpdateCurrency.inspectFuncUpdateCurrency(ctx, time)
	}

	mm_params := CurrencyChangeUpdaterMockUpdateCurrencyParams{ctx, time}

	// Record call args
	mmUpdateCurrency.UpdateCurrencyMock.mutex.Lock()
	mmUpdateCurrency.UpdateCurrencyMock.callArgs = append(mmUpdateCurrency.UpdateCurrencyMock.callArgs, &mm_params)
	mmUpdateCurrency.UpdateCurrencyMock.mutex.Unlock()

	for _, e := range mmUpdateCurrency.UpdateCurrencyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateCurrency.UpdateCurrencyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateCurrency.UpdateCurrencyMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateCurrency.UpdateCurrencyMock.defaultExpectation.params
		mm_got := CurrencyChangeUpdaterMockUpdateCurrencyParams{ctx, time}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateCurrency.t.Errorf("CurrencyChangeUpdaterMock.UpdateCurrency got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateCurrency.UpdateCurrencyMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateCurrency.t.Fatal("No results are set for the CurrencyChangeUpdaterMock.UpdateCurrency")
		}
		return (*mm_results).err
	}
	if mmUpdateCurrency.funcUpdateCurrency != nil {
		return mmUpdateCurrency.funcUpdateCurrency(ctx, time)
	}
	mmUpdateCurrency.t.Fatalf("Unexpected call to CurrencyChangeUpdaterMock.UpdateCurrency. %v %v", ctx, time)
	return
}

// UpdateCurrencyAfterCounter returns a count of finished CurrencyChangeUpdaterMock.UpdateCurrency invocations
func (mmUpdateCurrency *CurrencyChangeUpdaterMock) UpdateCurrencyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCurrency.afterUpdateCurrencyCounter)
}

// UpdateCurrencyBeforeCounter returns a count of CurrencyChangeUpdaterMock.UpdateCurrency invocations
func (mmUpdateCurrency *CurrencyChangeUpdaterMock) UpdateCurrencyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCurrency.beforeUpdateCurrencyCounter)
}

// Calls returns a list of arguments used in each call to CurrencyChangeUpdaterMock.UpdateCurrency.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateCurrency *mCurrencyChangeUpdaterMockUpdateCurrency) Calls() []*CurrencyChangeUpdaterMockUpdateCurrencyParams {
	mmUpdateCurrency.mutex.RLock()

	argCopy := make([]*CurrencyChangeUpdaterMockUpdateCurrencyParams, len(mmUpdateCurrency.callArgs))
	copy(argCopy, mmUpdateCurrency.callArgs)

	mmUpdateCurrency.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateCurrencyDone returns true if the count of the UpdateCurrency invocations corresponds
// the number of defined expectations
func (m *CurrencyChangeUpdaterMock) MinimockUpdateCurrencyDone() bool {
	for _, e := range m.UpdateCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCurrencyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCurrency != nil && mm_atomic.LoadUint64(&m.afterUpdateCurrencyCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateCurrencyInspect logs each unmet expectation
func (m *CurrencyChangeUpdaterMock) MinimockUpdateCurrencyInspect() {
	for _, e := range m.UpdateCurrencyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CurrencyChangeUpdaterMock.UpdateCurrency with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCurrencyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCurrencyCounter) < 1 {
		if m.UpdateCurrencyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CurrencyChangeUpdaterMock.UpdateCurrency")
		} else {
			m.t.Errorf("Expected call to CurrencyChangeUpdaterMock.UpdateCurrency with params: %#v", *m.UpdateCurrencyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCurrency != nil && mm_atomic.LoadUint64(&m.afterUpdateCurrencyCounter) < 1 {
		m.t.Error("Expected call to CurrencyChangeUpdaterMock.UpdateCurrency")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CurrencyChangeUpdaterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockUpdateCurrencyInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CurrencyChangeUpdaterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CurrencyChangeUpdaterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUpdateCurrencyDone()
}
